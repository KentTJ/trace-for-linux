#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "src/perfetto_cmd/perfetto_cmd_state.gen.h"

namespace perfetto {
namespace gen {

PerfettoCmdState::PerfettoCmdState() = default;
PerfettoCmdState::~PerfettoCmdState() = default;
PerfettoCmdState::PerfettoCmdState(const PerfettoCmdState&) = default;
PerfettoCmdState& PerfettoCmdState::operator=(const PerfettoCmdState&) = default;
PerfettoCmdState::PerfettoCmdState(PerfettoCmdState&&) noexcept = default;
PerfettoCmdState& PerfettoCmdState::operator=(PerfettoCmdState&&) = default;

bool PerfettoCmdState::operator==(const PerfettoCmdState& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(first_trace_timestamp_, other.first_trace_timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(last_trace_timestamp_, other.last_trace_timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(total_bytes_uploaded_, other.total_bytes_uploaded_)
   && ::protozero::internal::gen_helpers::EqualsField(session_state_, other.session_state_);
}

int PerfettoCmdState::session_state_size() const { return static_cast<int>(session_state_.size()); }
void PerfettoCmdState::clear_session_state() { session_state_.clear(); }
PerfettoCmdState_PerSessionState* PerfettoCmdState::add_session_state() { session_state_.emplace_back(); return &session_state_.back(); }
bool PerfettoCmdState::ParseFromArray(const void* raw, size_t size) {
  session_state_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* first_trace_timestamp */:
        field.get(&first_trace_timestamp_);
        break;
      case 2 /* last_trace_timestamp */:
        field.get(&last_trace_timestamp_);
        break;
      case 3 /* total_bytes_uploaded */:
        field.get(&total_bytes_uploaded_);
        break;
      case 4 /* session_state */:
        session_state_.emplace_back();
        session_state_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PerfettoCmdState::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PerfettoCmdState::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PerfettoCmdState::Serialize(::protozero::Message* msg) const {
  // Field 1: first_trace_timestamp
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeFixed(1, first_trace_timestamp_, msg);
  }

  // Field 2: last_trace_timestamp
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeFixed(2, last_trace_timestamp_, msg);
  }

  // Field 3: total_bytes_uploaded
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, total_bytes_uploaded_, msg);
  }

  // Field 4: session_state
  for (auto& it : session_state_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


PerfettoCmdState_PerSessionState::PerfettoCmdState_PerSessionState() = default;
PerfettoCmdState_PerSessionState::~PerfettoCmdState_PerSessionState() = default;
PerfettoCmdState_PerSessionState::PerfettoCmdState_PerSessionState(const PerfettoCmdState_PerSessionState&) = default;
PerfettoCmdState_PerSessionState& PerfettoCmdState_PerSessionState::operator=(const PerfettoCmdState_PerSessionState&) = default;
PerfettoCmdState_PerSessionState::PerfettoCmdState_PerSessionState(PerfettoCmdState_PerSessionState&&) noexcept = default;
PerfettoCmdState_PerSessionState& PerfettoCmdState_PerSessionState::operator=(PerfettoCmdState_PerSessionState&&) = default;

bool PerfettoCmdState_PerSessionState::operator==(const PerfettoCmdState_PerSessionState& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(session_name_, other.session_name_)
   && ::protozero::internal::gen_helpers::EqualsField(total_bytes_uploaded_, other.total_bytes_uploaded_)
   && ::protozero::internal::gen_helpers::EqualsField(last_trace_timestamp_, other.last_trace_timestamp_);
}

bool PerfettoCmdState_PerSessionState::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* session_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &session_name_);
        break;
      case 3 /* total_bytes_uploaded */:
        field.get(&total_bytes_uploaded_);
        break;
      case 2 /* last_trace_timestamp */:
        field.get(&last_trace_timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PerfettoCmdState_PerSessionState::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PerfettoCmdState_PerSessionState::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PerfettoCmdState_PerSessionState::Serialize(::protozero::Message* msg) const {
  // Field 1: session_name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, session_name_, msg);
  }

  // Field 3: total_bytes_uploaded
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, total_bytes_uploaded_, msg);
  }

  // Field 2: last_trace_timestamp
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeFixed(2, last_trace_timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
